Interfaces tend to be more flexable in how multiple interfaces can be inherited by a class as well as being easier to implement. Abstract classes can be good for having methods that are the same for all shapes like just the shapes name or color. In an abstract class you can have these concrete methods and variables as well as abstract methods. Interfaces only have abstract methods so by only using interfaces you would have to include certain repeated variables and method and each child class. By only using an abstract method, it is not as easy to implement certain methods that apply to certain child classes. I would say that they both work well together rather than on their own.
With the abstract class of shapes, polymorphism was much easier when looping through the array and showing the methods shared by the child classes. The interface shapes were much harder to use as more code had to be added to display the same methods from the abstract design. I could add a getName method to the interfaces but that would be just as much repeated code. I would likely add an interface like "nameable" or "colorable" but that would again be even more code that isn't a required part of the assignment. Overall, polymorphism makes the abstract shape class easier to use in main however with some additions, the interface design could work as well.